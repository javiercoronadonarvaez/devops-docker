services:
  # FRONTEND
  app:
    build:
      context: ./example-frontend # The context will pick this directory as the "build context"
      dockerfile: Dockerfile # This will simply tell which dockerfile to read
    ports:
      - 3000:80
    container_name: example-frontend-prod # This will name the container example-front-prod
    environment:
      REACT_APP_BACKEND_URL: http://localhost
    networks:
      - app_network
    command: ["serve", "-s", "-l", "80", "build"]

  # BACKEND
  backend:
    build:
      context: ./example-backend
      dockerfile: Dockerfile
    ports:
      - 8080:8080
    container_name: example-backend-prod # This will name the container example-backend-prod
    environment:
      REQUEST_ORIGIN: http://localhost
      REDIS_HOST: redis
      POSTGRES_HOST: db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DATABASE: postgres
    networks:
      - app_network
    command: ["./server"]
    depends_on:
      - db

  # REDIS 
  redis:
    image: redis:alpine
    container_name: redis-prod
    restart: unless-stopped
    networks:
      - app_network
    command: ["redis-server", "--appendonly", "yes"]

  # POSTGRES DATABASE
  db:
    image: postgres:16.6-alpine3.21
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: postgres
    container_name: postgres-db-prod
    networks:
      - app_network
    volumes:
      - ./database:/var/lib/postgresql/data  

  # REVERSE PROXY 
  nginx:
    image: nginx:1.20.1
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - 80:80
    container_name: reverse-proxy-prod
    networks:
      - app_network
    depends_on:
      - app # wait for the frontend container to be started

networks:
  app_network:
    driver: bridge